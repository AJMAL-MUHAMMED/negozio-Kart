<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,700">
    <!-- https://fonts.google.com/specimen/Roboto -->
    <link rel="stylesheet" href="/css/fontawesome.min.css">
    <!-- https://fontawesome.com/ -->
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <!-- https://getbootstrap.com/ -->
    <link rel="stylesheet" href="/css/templatemo-style.css">
    <!--
	Product Admin CSS Template
	https://templatemo.com/tm-524-product-admin
	-->
</head>

<body id="reportsPage">
    <div class="" id="home">
        <div class="container mt-3 ">

            <button id="MyButton">Report Download</button>
        </div>
        <div class="container mt-3">
            <!-- row -->
            <div class="row tm-content-row">
                <div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col">
                    <div class="tm-bg-primary-dark tm-block">
                        <h2 class="tm-block-title">Sales Reports</h2>
                        <canvas id="salesChart"></canvas>

                    </div>
                </div>
                <div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col">
                    <div class="tm-bg-primary-dark tm-block">
                        <h2 class="tm-block-title">Performance</h2>
                        <canvas id="productChart"></canvas>
                    </div>
                </div>
                {{!-- <div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col ">
                    <div class="tm-bg-primary-dark tm-block tm-block-taller">
                        <h2 class="tm-block-title">Storage Information</h2>
                        <div id="pieChartContainer">
                            <canvas id="pieChart" class="chartjs-render-monitor" width="200" height="200"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col">
                    <div class="tm-bg-primary-dark tm-block">
                        <h2 class="tm-block-title">Latest Hits</h2>
                        <canvas id="lineChart"></canvas>

                    </div>
                </div> --}}
            </div>
        </div>
        <footer class="tm-footer row tm-mt-small">
            <div class="col-12 font-weight-light">
                <p class="text-center text-white mb-0 px-4 small">
                    Copyright &copy; <b>2022</b> All rights reserved.


                </p>
            </div>
        </footer>
    </div>

    {{!--
    <script src="/js/jquery-3.3.1.min.js"></script> --}}
    <!-- https://jquery.com/download/ -->
    <script src="/js/moment.min.js"></script>
    <!-- https://momentjs.com/ -->
    <script src="/js/Chart.min.js"></script>
    <!-- http://www.chartjs.org/docs/latest/ -->
    <script src="/js/bootstrap.min.js"></script>
    <!-- https://getbootstrap.com/ -->
    <script src="/js/tooplate-scripts.js"></script>
    <script>
        Chart.defaults.global.defaultFontColor = 'white';
        let ctxLine,
            ctxBar,
            ctxPie,
            optionsLine,
            optionsBar,
            optionsPie,
            configLine,
            configBar,
            configPie,
            lineChart;
        barChart, pieChart;
        // DOM is ready
        $(function () {
            drawLineChart(); // Line Chart
            drawBarChart(); // Bar Chart
            drawPieChart(); // Pie Chart

            $(window).resize(function () {
                updateLineChart();
                updateBarChart();
            });
        })
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", chartIt)

        //====== variables of sales and profit chart
        const xLabels1 = [];
        const yLabelsSale1 = [];
        const yLabelsPro1 = [];

        //========= variables of products and sales chart

        const xLabels2 = [];
        const yLabelspro2 = []
        const yLabelsSale2 = []

        async function chartIt() {

            //================ data fetching =============
            var e = await fetch('/admin/chartData')
            e = await e.json()
            console.table(e)
            const saleContent = e.sales
            saleContent.map((curr) => {
                xLabels1.push(curr.date)
                yLabelsSale1.push(curr.total)
                // yLabelsPro1.push(Math.round(curr.total / 3.3))
            })
            const proContent = e.category.data
            proContent.map((curr) => {
                xLabels2.push(curr.category)
                yLabelspro2.push(curr.qty)

            })


            //=========== chart 2 start =========== //

            const ctx = document.getElementById('salesChart').getContext('2d');
            const myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: xLabels1,
                    datasets: [{
                        label: 'Sales',
                        data: yLabelsSale1,
                        backgroundColor: [
                            'rgba( 0,255, 0, .5)'

                        ],
                        borderColor:
                            ['rgba( 0, 255, 0, .5)']

                        ,
                        borderWidth: 1
                    }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            //=========== chart 2 end =========== //

            //=========== chart 1 start =========== //

            const ctx2 = document.getElementById('productChart').getContext('2d');
            const myChart2 = new Chart(ctx2, {
                type: 'line',
                data: {
                    labels: xLabels2,
                    datasets: [{
                        label: 'Sales',
                        data: yLabelspro2,
                        backgroundColor: [
                            "#F7604D"

                        ],
                        borderColor:
                            ["#F7604D"]

                        ,
                        borderWidth: 5
                    }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            //=========== chart 2 end =========== //




            //=========== report Generae csv and Download it  =========== //


            const objectToCsv = function (data) {
                const csvRows = [];
                //get the headers 
                const headers = Object.keys(data[0]);
                csvRows.push(headers.join(','));

                //loop over the rows

                for (const row of data) {
                    const values = headers.map(header => {
                        const escaped = ('' + row[header]).replace(/"/g, '\\"')
                        return `"${escaped}"`
                    })
                    csvRows.push(values.join(','))
                }
                return csvRows.join('\n')
            }
            const download = function (data) {
                const blob = new Blob([data], { type: 'text/csv' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.setAttribute('hidden', '');
                a.setAttribute('href', url);
                a.setAttribute('download', 'download.csv');
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);

            }
            async function getReport() {
                let e = await fetch('/admin/reportData')
                e = await e.json()
                console.table(e)
                const data = e.map(row => ({
                    ProductId: row.product_id,
                    ProductName: row.product_name,
                    Customer: row.customer,
                    CustomerId: row.customer_id,
                    Category: row.category,
                    Price: row.price,
                    Quantity: row.quantity,
                    Discount: row.discount,
                    GrandTotal: row.grand_total,
                    Date: row.date
                }));
                const csvData = objectToCsv(data)
                download(csvData)
            }


            const button = document.getElementById('MyButton');
            button.addEventListener('click', getReport)

        }






    </script>






</body>